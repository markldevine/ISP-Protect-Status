#!/usr/bin/env raku

#   select STGPOOL_NAME,EST_CAPACITY_MB,PCT_UTILIZED,COMP_SPACE_SAVED_MB,DEDUP_SPACE_SAVED_MB,SPACE_SAVED_MB from STGPOOLS where STGPOOL_NAME like '%_DC'
#   QUERY', 'EVENT', $domain, '*', 'BEGINDATE=TODAY-' ~ $days, BEGINTIME=??? 'ENDDATE=TODAY', ENDTIME=??? 'FORMAT=DETAILED
#       - STATUS!='COMPLETED'
#       - duration 50% longer than usual or > 4 hours more than usual
#   Log usage
#   dbspace
#   ACTLOG errors
#   AIX disk space

use ISP::dsmadmc;
use Data::Dump::Tree;

my %dbspaces;
class DBSPACE {
    has Int     $.TOTAL_FS_SIZE_MB;
    has Int     $.USED_FS_SIZE_MB;
    has Int     $.FREE_SPACE_MB;
}

my %logs;
class LOG {
    has Str $.ACTIVE_LOG_DIR;
    has Rat $.TOTAL_SPACE_MB;       # 333661.00
    has Rat $.USED_SPACE_MB;
    has Rat $.FREE_SPACE_MB;
    has Rat $.ACTIVELOG_TOL_FS_MB;
    has Rat $.ACTIVELOG_USED_FS_MB;
    has Rat $.ACTIVELOG_FREE_FS_MB;
    has Str $.ARCH_LOG_DIR;
    has Rat $.ARCHLOG_TOL_FS_MB;
    has Rat $.ARCHLOG_USED_FS_MB;
    has Rat $.ARCHLOG_FREE_FS_MB;
    has Rat $.ARCH_LOG_COMPRESSED;
    has Str $.MIRROR_LOG_DIR; 
    has Rat $.MIRLOG_TOL_FS_MB; 
    has Rat $.MIRLOG_USED_FS_MB; 
    has Rat $.MIRLOG_FREE_FS_MB: 
    has Str $.AFAILOVER_LOG_DIR;
    has Rat $.AFAILOVER_TOL_FS_MB;
    has Rat $.AFAILOVER_USED_FS_MB;
    has Rat $.AFAILOVER_FREE_FS_MB;
}

my %storage-pools;
class Storage-Pool-Consumption {
    has Real    $.EST_CAPACITY_MB;
    has Real    $.PCT_UTILIZED;
}

sub MAIN (
    Str:D   :$isp-server!,                          #= ISP server name
    Str:D   :$isp-admin!,                           #= ISP server name
    Bool    :$cache,                                #= Read from cache
) {
    my $dsmadmc     = ISP::dsmadmc.new(:$isp-server, :$isp-admin, :$cache);
    for $dsmadmc.execute(['SELECT', 'STGPOOL_NAME,EST_CAPACITY_MB,PCT_UTILIZED', 'FROM', 'STGPOOLS']) -> $stgpool {
        %storage-pools{$stgpool<STGPOOL_NAME>}  = Storage-Pool-Consumption.new(:EST_CAPACITY_MB($stgpool<EST_CAPACITY_MB>.Real), :PCT_UTILIZED($stgpool<PCT_UTILIZED>.Real));
    }
ddt %storage-pools;
    for $dsmadmc.execute(['SELECT', 'LOCATION,TOTAL_FS_SIZE_MB,USED_FS_SIZE_MB,FREE_SPACE_MB', 'FROM', 'DBSPACE']) -> $dbspace {
        %dbspaces{$dbspace<LOCATION>} = DBSPACE.new(:TOTAL_FS_SIZE_MB($dbspace<TOTAL_FS_SIZE_MB>.Int), :USED_FS_SIZE_MB($dbspace<USED_FS_SIZE_MB>.Int), :FREE_SPACE_MB($dbspace<FREE_SPACE_MB>.Int));
    }
ddt %dbspaces;
}

=finish

SELECT TO_CHAR(CHAR(scheduled_start),'YYYY-MM-DD HH24:MI:SS') as SCHEDULED_START,TRANSLATE('a bc:de:fg', DIGITS(completed - actual_start), '_______abcdefgh_____',' ') as "ELAPTIME (D HHMMSS)",schedule_name, status, reason FROM events WHERE node_name IS NULL and scheduled_start> '2023-08-22 00:00:00'

